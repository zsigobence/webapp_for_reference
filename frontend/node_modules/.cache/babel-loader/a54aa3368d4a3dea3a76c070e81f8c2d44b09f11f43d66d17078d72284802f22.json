{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMongoDBClientEncryption = exports.aws4 = exports.getSocks = exports.getSnappy = exports.getGcpMetadata = exports.getAwsCredentialProvider = exports.getZstdLibrary = exports.getKerberos = void 0;\nconst error_1 = require(\"./error\");\nfunction makeErrorModule(error) {\n  const props = error ? {\n    kModuleError: error\n  } : {};\n  return new Proxy(props, {\n    get: (_, key) => {\n      if (key === 'kModuleError') {\n        return error;\n      }\n      throw error;\n    },\n    set: () => {\n      throw error;\n    }\n  });\n}\nfunction getKerberos() {\n  let kerberos;\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    kerberos = require('kerberos');\n  } catch (error) {\n    kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication', {\n      cause: error,\n      dependencyName: 'kerberos'\n    }));\n  }\n  return kerberos;\n}\nexports.getKerberos = getKerberos;\nfunction getZstdLibrary() {\n  let ZStandard;\n  try {\n    ZStandard = require('@mongodb-js/zstd');\n  } catch (error) {\n    ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression', {\n      cause: error,\n      dependencyName: 'zstd'\n    }));\n  }\n  return ZStandard;\n}\nexports.getZstdLibrary = getZstdLibrary;\nfunction getAwsCredentialProvider() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const credentialProvider = require('@aws-sdk/credential-providers');\n    return credentialProvider;\n  } catch (error) {\n    return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' + ' Please install it to enable getting aws credentials via the official sdk.', {\n      cause: error,\n      dependencyName: '@aws-sdk/credential-providers'\n    }));\n  }\n}\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nfunction getGcpMetadata() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const credentialProvider = require('gcp-metadata');\n    return credentialProvider;\n  } catch (error) {\n    return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' + ' Please install it to enable getting gcp credentials via the official sdk.', {\n      cause: error,\n      dependencyName: 'gcp-metadata'\n    }));\n  }\n}\nexports.getGcpMetadata = getGcpMetadata;\nfunction getSnappy() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const value = require('snappy');\n    return value;\n  } catch (error) {\n    const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', {\n      cause: error,\n      dependencyName: 'snappy'\n    });\n    return {\n      kModuleError\n    };\n  }\n}\nexports.getSnappy = getSnappy;\nfunction getSocks() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const value = require('socks');\n    return value;\n  } catch (error) {\n    const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', {\n      cause: error,\n      dependencyName: 'socks'\n    });\n    return {\n      kModuleError\n    };\n  }\n}\nexports.getSocks = getSocks;\nexports.aws4 = loadAws4();\nfunction loadAws4() {\n  let aws4;\n  try {\n    aws4 = require('aws4');\n  } catch (error) {\n    aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication', {\n      cause: error,\n      dependencyName: 'aws4'\n    }));\n  }\n  return aws4;\n}\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n  let mongodbClientEncryption = null;\n  try {\n    // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n    // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n    // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n    mongodbClientEncryption = require('mongodb-client-encryption');\n  } catch (error) {\n    const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', {\n      cause: error,\n      dependencyName: 'mongodb-client-encryption'\n    });\n    return {\n      kModuleError\n    };\n  }\n  return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;","map":{"version":3,"names":["error_1","require","makeErrorModule","error","props","kModuleError","Proxy","get","_","key","set","getKerberos","kerberos","MongoMissingDependencyError","cause","dependencyName","exports","getZstdLibrary","ZStandard","getAwsCredentialProvider","credentialProvider","getGcpMetadata","getSnappy","value","getSocks","aws4","loadAws4","getMongoDBClientEncryption","mongodbClientEncryption"],"sources":["D:\\School\\referencia\\webapp\\node_modules\\mongodb\\src\\deps.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport { type Stream } from './cmap/connect';\nimport { MongoMissingDependencyError } from './error';\nimport type { Callback } from './utils';\n\nfunction makeErrorModule(error: any) {\n  const props = error ? { kModuleError: error } : {};\n  return new Proxy(props, {\n    get: (_: any, key: any) => {\n      if (key === 'kModuleError') {\n        return error;\n      }\n      throw error;\n    },\n    set: () => {\n      throw error;\n    }\n  });\n}\n\nexport type Kerberos = typeof import('kerberos') | { kModuleError: MongoMissingDependencyError };\n\nexport function getKerberos(): Kerberos {\n  let kerberos: Kerberos;\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    kerberos = require('kerberos');\n  } catch (error) {\n    kerberos = makeErrorModule(\n      new MongoMissingDependencyError(\n        'Optional module `kerberos` not found. Please install it to enable kerberos authentication',\n        { cause: error, dependencyName: 'kerberos' }\n      )\n    );\n  }\n  return kerberos;\n}\n\nexport interface KerberosClient {\n  step(challenge: string): Promise<string>;\n  step(challenge: string, callback: Callback<string>): void;\n  wrap(challenge: string, options: { user: string }): Promise<string>;\n  wrap(challenge: string, options: { user: string }, callback: Callback<string>): void;\n  unwrap(challenge: string): Promise<string>;\n  unwrap(challenge: string, callback: Callback<string>): void;\n}\n\ntype ZStandardLib = {\n  /**\n   * Compress using zstd.\n   * @param buf - Buffer to be compressed.\n   */\n  compress(buf: Buffer, level?: number): Promise<Buffer>;\n\n  /**\n   * Decompress using zstd.\n   */\n  decompress(buf: Buffer): Promise<Buffer>;\n};\n\nexport type ZStandard = ZStandardLib | { kModuleError: MongoMissingDependencyError };\n\nexport function getZstdLibrary(): ZStandardLib | { kModuleError: MongoMissingDependencyError } {\n  let ZStandard: ZStandardLib | { kModuleError: MongoMissingDependencyError };\n  try {\n    ZStandard = require('@mongodb-js/zstd');\n  } catch (error) {\n    ZStandard = makeErrorModule(\n      new MongoMissingDependencyError(\n        'Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression',\n        { cause: error, dependencyName: 'zstd' }\n      )\n    );\n  }\n\n  return ZStandard;\n}\n\n/**\n * @internal\n * Copy of the AwsCredentialIdentityProvider interface from [`smithy/types`](https://socket.dev/npm/package/\\@smithy/types/files/1.1.1/dist-types/identity/awsCredentialIdentity.d.ts),\n * the return type of the aws-sdk's `fromNodeProviderChain().provider()`.\n */\nexport interface AWSCredentials {\n  accessKeyId: string;\n  secretAccessKey: string;\n  sessionToken: string;\n  expiration?: Date;\n}\n\ntype CredentialProvider = {\n  fromNodeProviderChain(\n    this: void,\n    options: { clientConfig: { region: string } }\n  ): () => Promise<AWSCredentials>;\n  fromNodeProviderChain(this: void): () => Promise<AWSCredentials>;\n};\n\nexport function getAwsCredentialProvider():\n  | CredentialProvider\n  | { kModuleError: MongoMissingDependencyError } {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const credentialProvider = require('@aws-sdk/credential-providers');\n    return credentialProvider;\n  } catch (error) {\n    return makeErrorModule(\n      new MongoMissingDependencyError(\n        'Optional module `@aws-sdk/credential-providers` not found.' +\n          ' Please install it to enable getting aws credentials via the official sdk.',\n        { cause: error, dependencyName: '@aws-sdk/credential-providers' }\n      )\n    );\n  }\n}\n\n/** @internal */\nexport type GcpMetadata =\n  | typeof import('gcp-metadata')\n  | { kModuleError: MongoMissingDependencyError };\n\nexport function getGcpMetadata(): GcpMetadata {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const credentialProvider = require('gcp-metadata');\n    return credentialProvider;\n  } catch (error) {\n    return makeErrorModule(\n      new MongoMissingDependencyError(\n        'Optional module `gcp-metadata` not found.' +\n          ' Please install it to enable getting gcp credentials via the official sdk.',\n        { cause: error, dependencyName: 'gcp-metadata' }\n      )\n    );\n  }\n}\n\n/** @internal */\nexport type SnappyLib = {\n  /**\n   * In order to support both we must check the return value of the function\n   * @param buf - Buffer to be compressed\n   */\n  compress(buf: Buffer): Promise<Buffer>;\n\n  /**\n   * In order to support both we must check the return value of the function\n   * @param buf - Buffer to be compressed\n   */\n  uncompress(buf: Buffer, opt: { asBuffer: true }): Promise<Buffer>;\n};\n\nexport function getSnappy(): SnappyLib | { kModuleError: MongoMissingDependencyError } {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const value = require('snappy');\n    return value;\n  } catch (error) {\n    const kModuleError = new MongoMissingDependencyError(\n      'Optional module `snappy` not found. Please install it to enable snappy compression',\n      { cause: error, dependencyName: 'snappy' }\n    );\n    return { kModuleError };\n  }\n}\n\nexport type SocksLib = {\n  SocksClient: {\n    createConnection(options: {\n      command: 'connect';\n      destination: { host: string; port: number };\n      proxy: {\n        /** host and port are ignored because we pass existing_socket */\n        host: 'iLoveJavaScript';\n        port: 0;\n        type: 5;\n        userId?: string;\n        password?: string;\n      };\n      timeout?: number;\n      /** We always create our own socket, and pass it to this API for proxy negotiation */\n      existing_socket: Stream;\n    }): Promise<{ socket: Stream }>;\n  };\n};\n\nexport function getSocks(): SocksLib | { kModuleError: MongoMissingDependencyError } {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const value = require('socks');\n    return value;\n  } catch (error) {\n    const kModuleError = new MongoMissingDependencyError(\n      'Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy',\n      { cause: error, dependencyName: 'socks' }\n    );\n    return { kModuleError };\n  }\n}\n\ninterface AWS4 {\n  /**\n   * Created these inline types to better assert future usage of this API\n   * @param options - options for request\n   * @param credentials - AWS credential details, sessionToken should be omitted entirely if its false-y\n   */\n  sign(\n    this: void,\n    options: {\n      path: '/';\n      body: string;\n      host: string;\n      method: 'POST';\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded';\n        'Content-Length': number;\n        'X-MongoDB-Server-Nonce': string;\n        'X-MongoDB-GS2-CB-Flag': 'n';\n      };\n      service: string;\n      region: string;\n    },\n    credentials:\n      | {\n          accessKeyId: string;\n          secretAccessKey: string;\n          sessionToken: string;\n        }\n      | {\n          accessKeyId: string;\n          secretAccessKey: string;\n        }\n      | undefined\n  ): {\n    headers: {\n      Authorization: string;\n      'X-Amz-Date': string;\n    };\n  };\n}\n\nexport const aws4: AWS4 | { kModuleError: MongoMissingDependencyError } = loadAws4();\n\nfunction loadAws4() {\n  let aws4: AWS4 | { kModuleError: MongoMissingDependencyError };\n  try {\n    aws4 = require('aws4');\n  } catch (error) {\n    aws4 = makeErrorModule(\n      new MongoMissingDependencyError(\n        'Optional module `aws4` not found. Please install it to enable AWS authentication',\n        { cause: error, dependencyName: 'aws4' }\n      )\n    );\n  }\n\n  return aws4;\n}\n\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nexport function getMongoDBClientEncryption():\n  | typeof import('mongodb-client-encryption')\n  | { kModuleError: MongoMissingDependencyError } {\n  let mongodbClientEncryption = null;\n\n  try {\n    // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n    // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n    // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n    mongodbClientEncryption = require('mongodb-client-encryption');\n  } catch (error) {\n    const kModuleError = new MongoMissingDependencyError(\n      'Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.',\n      { cause: error, dependencyName: 'mongodb-client-encryption' }\n    );\n    return { kModuleError };\n  }\n\n  return mongodbClientEncryption;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}