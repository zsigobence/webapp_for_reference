{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\nconst constants_1 = require(\"../constants\");\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, address, previousDescription, newDescription) {\n    this.name = constants_1.SERVER_DESCRIPTION_CHANGED;\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    /** @internal */\n    this.name = constants_1.SERVER_OPENING;\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    /** @internal */\n    this.name = constants_1.SERVER_CLOSED;\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, previousDescription, newDescription) {\n    /** @internal */\n    this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n  /** @internal */\n  constructor(topologyId) {\n    /** @internal */\n    this.name = constants_1.TOPOLOGY_OPENING;\n    this.topologyId = topologyId;\n  }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n  /** @internal */\n  constructor(topologyId) {\n    /** @internal */\n    this.name = constants_1.TOPOLOGY_CLOSED;\n    this.topologyId = topologyId;\n  }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n  /** @internal */\n  constructor(connectionId, awaited) {\n    /** @internal */\n    this.name = constants_1.SERVER_HEARTBEAT_STARTED;\n    this.connectionId = connectionId;\n    this.awaited = awaited;\n  }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n  /** @internal */\n  constructor(connectionId, duration, reply, awaited) {\n    /** @internal */\n    this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply ?? {};\n    this.awaited = awaited;\n  }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n  /** @internal */\n  constructor(connectionId, duration, failure, awaited) {\n    /** @internal */\n    this.name = constants_1.SERVER_HEARTBEAT_FAILED;\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n    this.awaited = awaited;\n  }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;","map":{"version":3,"names":["constants_1","require","ServerDescriptionChangedEvent","constructor","topologyId","address","previousDescription","newDescription","name","SERVER_DESCRIPTION_CHANGED","exports","ServerOpeningEvent","SERVER_OPENING","ServerClosedEvent","SERVER_CLOSED","TopologyDescriptionChangedEvent","TOPOLOGY_DESCRIPTION_CHANGED","TopologyOpeningEvent","TOPOLOGY_OPENING","TopologyClosedEvent","TOPOLOGY_CLOSED","ServerHeartbeatStartedEvent","connectionId","awaited","SERVER_HEARTBEAT_STARTED","ServerHeartbeatSucceededEvent","duration","reply","SERVER_HEARTBEAT_SUCCEEDED","ServerHeartbeatFailedEvent","failure","SERVER_HEARTBEAT_FAILED"],"sources":["D:\\School\\referencia\\webapp\\node_modules\\mongodb\\src\\sdam\\events.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport {\n  SERVER_CLOSED,\n  SERVER_DESCRIPTION_CHANGED,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED,\n  SERVER_OPENING,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING\n} from '../constants';\nimport type { ServerDescription } from './server_description';\nimport type { TopologyDescription } from './topology_description';\n\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nexport class ServerDescriptionChangedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n  /** The previous server description */\n  previousDescription: ServerDescription;\n  /** The new server description */\n  newDescription: ServerDescription;\n  name = SERVER_DESCRIPTION_CHANGED;\n\n  /** @internal */\n  constructor(\n    topologyId: number,\n    address: string,\n    previousDescription: ServerDescription,\n    newDescription: ServerDescription\n  ) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\n\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nexport class ServerOpeningEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n  /** @internal */\n  name = SERVER_OPENING;\n\n  /** @internal */\n  constructor(topologyId: number, address: string) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\n\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nexport class ServerClosedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n  /** @internal */\n  name = SERVER_CLOSED;\n\n  /** @internal */\n  constructor(topologyId: number, address: string) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\n\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nexport class TopologyDescriptionChangedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The old topology description */\n  previousDescription: TopologyDescription;\n  /** The new topology description */\n  newDescription: TopologyDescription;\n  /** @internal */\n  name = TOPOLOGY_DESCRIPTION_CHANGED;\n\n  /** @internal */\n  constructor(\n    topologyId: number,\n    previousDescription: TopologyDescription,\n    newDescription: TopologyDescription\n  ) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\n\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nexport class TopologyOpeningEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** @internal */\n  name = TOPOLOGY_OPENING;\n\n  /** @internal */\n  constructor(topologyId: number) {\n    this.topologyId = topologyId;\n  }\n}\n\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nexport class TopologyClosedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** @internal */\n  name = TOPOLOGY_CLOSED;\n\n  /** @internal */\n  constructor(topologyId: number) {\n    this.topologyId = topologyId;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nexport class ServerHeartbeatStartedEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** Is true when using the streaming protocol */\n  awaited: boolean;\n  /** @internal */\n  name = SERVER_HEARTBEAT_STARTED;\n\n  /** @internal */\n  constructor(connectionId: string, awaited: boolean) {\n    this.connectionId = connectionId;\n    this.awaited = awaited;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nexport class ServerHeartbeatSucceededEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** The execution time of the event in ms */\n  duration: number;\n  /** The command reply */\n  reply: Document;\n  /** Is true when using the streaming protocol */\n  awaited: boolean;\n  /** @internal */\n  name = SERVER_HEARTBEAT_SUCCEEDED;\n\n  /** @internal */\n  constructor(connectionId: string, duration: number, reply: Document | null, awaited: boolean) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply ?? {};\n    this.awaited = awaited;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nexport class ServerHeartbeatFailedEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** The execution time of the event in ms */\n  duration: number;\n  /** The command failure */\n  failure: Error;\n  /** Is true when using the streaming protocol */\n  awaited: boolean;\n  /** @internal */\n  name = SERVER_HEARTBEAT_FAILED;\n\n  /** @internal */\n  constructor(connectionId: string, duration: number, failure: Error, awaited: boolean) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n    this.awaited = awaited;\n  }\n}\n"],"mappings":";;;;;;AACA,MAAAA,WAAA,GAAAC,OAAA;AAcA;;;;;AAKA,MAAaC,6BAA6B;EAWxC;EACAC,YACEC,UAAkB,EAClBC,OAAe,EACfC,mBAAsC,EACtCC,cAAiC;IAPnC,KAAAC,IAAI,GAAGR,WAAA,CAAAS,0BAA0B;IAS/B,IAAI,CAACL,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;;AAtBFG,OAAA,CAAAR,6BAAA,GAAAA,6BAAA;AAyBA;;;;;AAKA,MAAaS,kBAAkB;EAQ7B;EACAR,YAAYC,UAAkB,EAAEC,OAAe;IAJ/C;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAAY,cAAc;IAInB,IAAI,CAACR,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;AAZFK,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAeA;;;;;AAKA,MAAaE,iBAAiB;EAQ5B;EACAV,YAAYC,UAAkB,EAAEC,OAAe;IAJ/C;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAAc,aAAa;IAIlB,IAAI,CAACV,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;AAZFK,OAAA,CAAAG,iBAAA,GAAAA,iBAAA;AAeA;;;;;AAKA,MAAaE,+BAA+B;EAU1C;EACAZ,YACEC,UAAkB,EAClBE,mBAAwC,EACxCC,cAAmC;IAPrC;IACA,KAAAC,IAAI,GAAGR,WAAA,CAAAgB,4BAA4B;IAQjC,IAAI,CAACZ,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;;AAnBFG,OAAA,CAAAK,+BAAA,GAAAA,+BAAA;AAsBA;;;;;AAKA,MAAaE,oBAAoB;EAM/B;EACAd,YAAYC,UAAkB;IAJ9B;IACA,KAAAI,IAAI,GAAGR,WAAA,CAAAkB,gBAAgB;IAIrB,IAAI,CAACd,UAAU,GAAGA,UAAU;EAC9B;;AATFM,OAAA,CAAAO,oBAAA,GAAAA,oBAAA;AAYA;;;;;AAKA,MAAaE,mBAAmB;EAM9B;EACAhB,YAAYC,UAAkB;IAJ9B;IACA,KAAAI,IAAI,GAAGR,WAAA,CAAAoB,eAAe;IAIpB,IAAI,CAAChB,UAAU,GAAGA,UAAU;EAC9B;;AATFM,OAAA,CAAAS,mBAAA,GAAAA,mBAAA;AAYA;;;;;;;AAOA,MAAaE,2BAA2B;EAQtC;EACAlB,YAAYmB,YAAoB,EAAEC,OAAgB;IAJlD;IACA,KAAAf,IAAI,GAAGR,WAAA,CAAAwB,wBAAwB;IAI7B,IAAI,CAACF,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;AAZFb,OAAA,CAAAW,2BAAA,GAAAA,2BAAA;AAeA;;;;;AAKA,MAAaI,6BAA6B;EAYxC;EACAtB,YAAYmB,YAAoB,EAAEI,QAAgB,EAAEC,KAAsB,EAAEJ,OAAgB;IAJ5F;IACA,KAAAf,IAAI,GAAGR,WAAA,CAAA4B,0BAA0B;IAI/B,IAAI,CAACN,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACI,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK,IAAI,EAAE;IACxB,IAAI,CAACJ,OAAO,GAAGA,OAAO;EACxB;;AAlBFb,OAAA,CAAAe,6BAAA,GAAAA,6BAAA;AAqBA;;;;;AAKA,MAAaI,0BAA0B;EAYrC;EACA1B,YAAYmB,YAAoB,EAAEI,QAAgB,EAAEI,OAAc,EAAEP,OAAgB;IAJpF;IACA,KAAAf,IAAI,GAAGR,WAAA,CAAA+B,uBAAuB;IAI5B,IAAI,CAACT,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACI,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACI,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACP,OAAO,GAAGA,OAAO;EACxB;;AAlBFb,OAAA,CAAAmB,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}