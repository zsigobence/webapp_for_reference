{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Timeout = exports.TimeoutError = void 0;\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nclass TimeoutError extends Error {\n  get name() {\n    return 'TimeoutError';\n  }\n  constructor(message, options) {\n    super(message, options);\n  }\n  static is(error) {\n    return error != null && typeof error === 'object' && 'name' in error && error.name === 'TimeoutError';\n  }\n}\nexports.TimeoutError = TimeoutError;\n/**\n * @internal\n * This class is an abstraction over timeouts\n * The Timeout class can only be in the pending or rejected states. It is guaranteed not to resolve\n * if interacted with exclusively through its public API\n * */\nclass Timeout extends Promise {\n  get [Symbol.toStringTag]() {\n    return 'MongoDBTimeout';\n  }\n  /** Create a new timeout that expires in `duration` ms */\n  constructor(executor = () => null, duration, unref = false) {\n    let reject;\n    if (duration < 0) {\n      throw new error_1.MongoInvalidArgumentError('Cannot create a Timeout with a negative duration');\n    }\n    super((_, promiseReject) => {\n      reject = promiseReject;\n      executor(utils_1.noop, promiseReject);\n    });\n    this.ended = null;\n    this.timedOut = false;\n    this.duration = duration;\n    this.start = Math.trunc(performance.now());\n    if (this.duration > 0) {\n      this.id = (0, timers_1.setTimeout)(() => {\n        this.ended = Math.trunc(performance.now());\n        this.timedOut = true;\n        reject(new TimeoutError(`Expired after ${duration}ms`));\n      }, this.duration);\n      if (typeof this.id.unref === 'function' && unref) {\n        // Ensure we do not keep the Node.js event loop running\n        this.id.unref();\n      }\n    }\n  }\n  /**\n   * Clears the underlying timeout. This method is idempotent\n   */\n  clear() {\n    (0, timers_1.clearTimeout)(this.id);\n    this.id = undefined;\n  }\n  static expires(durationMS, unref) {\n    return new Timeout(undefined, durationMS, unref);\n  }\n  static is(timeout) {\n    return typeof timeout === 'object' && timeout != null && Symbol.toStringTag in timeout && timeout[Symbol.toStringTag] === 'MongoDBTimeout' && 'then' in timeout &&\n    // eslint-disable-next-line github/no-then\n    typeof timeout.then === 'function';\n  }\n}\nexports.Timeout = Timeout;","map":{"version":3,"names":["timers_1","require","error_1","utils_1","TimeoutError","Error","name","constructor","message","options","is","error","exports","Timeout","Promise","Symbol","toStringTag","executor","duration","unref","reject","MongoInvalidArgumentError","_","promiseReject","noop","ended","timedOut","start","Math","trunc","performance","now","id","setTimeout","clear","clearTimeout","undefined","expires","durationMS","timeout","then"],"sources":["D:\\School\\referencia\\webapp\\node_modules\\mongodb\\src\\timeout.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { MongoInvalidArgumentError } from './error';\nimport { noop } from './utils';\n\n/** @internal */\nexport class TimeoutError extends Error {\n  override get name(): 'TimeoutError' {\n    return 'TimeoutError';\n  }\n\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  static is(error: unknown): error is TimeoutError {\n    return (\n      error != null && typeof error === 'object' && 'name' in error && error.name === 'TimeoutError'\n    );\n  }\n}\n\ntype Executor = ConstructorParameters<typeof Promise<never>>[0];\ntype Reject = Parameters<ConstructorParameters<typeof Promise<never>>[0]>[1];\n/**\n * @internal\n * This class is an abstraction over timeouts\n * The Timeout class can only be in the pending or rejected states. It is guaranteed not to resolve\n * if interacted with exclusively through its public API\n * */\nexport class Timeout extends Promise<never> {\n  get [Symbol.toStringTag](): 'MongoDBTimeout' {\n    return 'MongoDBTimeout';\n  }\n\n  private id?: NodeJS.Timeout;\n\n  public readonly start: number;\n  public ended: number | null = null;\n  public duration: number;\n  public timedOut = false;\n\n  /** Create a new timeout that expires in `duration` ms */\n  private constructor(executor: Executor = () => null, duration: number, unref = false) {\n    let reject!: Reject;\n\n    if (duration < 0) {\n      throw new MongoInvalidArgumentError('Cannot create a Timeout with a negative duration');\n    }\n\n    super((_, promiseReject) => {\n      reject = promiseReject;\n\n      executor(noop, promiseReject);\n    });\n\n    this.duration = duration;\n    this.start = Math.trunc(performance.now());\n\n    if (this.duration > 0) {\n      this.id = setTimeout(() => {\n        this.ended = Math.trunc(performance.now());\n        this.timedOut = true;\n        reject(new TimeoutError(`Expired after ${duration}ms`));\n      }, this.duration);\n      if (typeof this.id.unref === 'function' && unref) {\n        // Ensure we do not keep the Node.js event loop running\n        this.id.unref();\n      }\n    }\n  }\n\n  /**\n   * Clears the underlying timeout. This method is idempotent\n   */\n  clear(): void {\n    clearTimeout(this.id);\n    this.id = undefined;\n  }\n\n  public static expires(durationMS: number, unref?: boolean): Timeout {\n    return new Timeout(undefined, durationMS, unref);\n  }\n\n  static is(timeout: unknown): timeout is Timeout {\n    return (\n      typeof timeout === 'object' &&\n      timeout != null &&\n      Symbol.toStringTag in timeout &&\n      timeout[Symbol.toStringTag] === 'MongoDBTimeout' &&\n      'then' in timeout &&\n      // eslint-disable-next-line github/no-then\n      typeof timeout.then === 'function'\n    );\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AAEA;AACA,MAAaG,YAAa,SAAQC,KAAK;EACrC,IAAaC,IAAIA,CAAA;IACf,OAAO,cAAc;EACvB;EAEAC,YAAYC,OAAe,EAAEC,OAA2B;IACtD,KAAK,CAACD,OAAO,EAAEC,OAAO,CAAC;EACzB;EAEA,OAAOC,EAAEA,CAACC,KAAc;IACtB,OACEA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,MAAM,IAAIA,KAAK,IAAIA,KAAK,CAACL,IAAI,KAAK,cAAc;EAElG;;AAbFM,OAAA,CAAAR,YAAA,GAAAA,YAAA;AAkBA;;;;;;AAMA,MAAaS,OAAQ,SAAQC,OAAc;EACzC,KAAKC,MAAM,CAACC,WAAW,IAAC;IACtB,OAAO,gBAAgB;EACzB;EASA;EACAT,YAAoBU,QAAA,GAAqBA,CAAA,KAAM,IAAI,EAAEC,QAAgB,EAAEC,KAAK,GAAG,KAAK;IAClF,IAAIC,MAAe;IAEnB,IAAIF,QAAQ,GAAG,CAAC,EAAE;MAChB,MAAM,IAAIhB,OAAA,CAAAmB,yBAAyB,CAAC,kDAAkD,CAAC;;IAGzF,KAAK,CAAC,CAACC,CAAC,EAAEC,aAAa,KAAI;MACzBH,MAAM,GAAGG,aAAa;MAEtBN,QAAQ,CAACd,OAAA,CAAAqB,IAAI,EAAED,aAAa,CAAC;IAC/B,CAAC,CAAC;IAhBG,KAAAE,KAAK,GAAkB,IAAI;IAE3B,KAAAC,QAAQ,GAAG,KAAK;IAgBrB,IAAI,CAACR,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACS,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,EAAE,CAAC;IAE1C,IAAI,IAAI,CAACb,QAAQ,GAAG,CAAC,EAAE;MACrB,IAAI,CAACc,EAAE,GAAG,IAAAhC,QAAA,CAAAiC,UAAU,EAAC,MAAK;QACxB,IAAI,CAACR,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,EAAE,CAAC;QAC1C,IAAI,CAACL,QAAQ,GAAG,IAAI;QACpBN,MAAM,CAAC,IAAIhB,YAAY,CAAC,iBAAiBc,QAAQ,IAAI,CAAC,CAAC;MACzD,CAAC,EAAE,IAAI,CAACA,QAAQ,CAAC;MACjB,IAAI,OAAO,IAAI,CAACc,EAAE,CAACb,KAAK,KAAK,UAAU,IAAIA,KAAK,EAAE;QAChD;QACA,IAAI,CAACa,EAAE,CAACb,KAAK,EAAE;;;EAGrB;EAEA;;;EAGAe,KAAKA,CAAA;IACH,IAAAlC,QAAA,CAAAmC,YAAY,EAAC,IAAI,CAACH,EAAE,CAAC;IACrB,IAAI,CAACA,EAAE,GAAGI,SAAS;EACrB;EAEO,OAAOC,OAAOA,CAACC,UAAkB,EAAEnB,KAAe;IACvD,OAAO,IAAIN,OAAO,CAACuB,SAAS,EAAEE,UAAU,EAAEnB,KAAK,CAAC;EAClD;EAEA,OAAOT,EAAEA,CAAC6B,OAAgB;IACxB,OACE,OAAOA,OAAO,KAAK,QAAQ,IAC3BA,OAAO,IAAI,IAAI,IACfxB,MAAM,CAACC,WAAW,IAAIuB,OAAO,IAC7BA,OAAO,CAACxB,MAAM,CAACC,WAAW,CAAC,KAAK,gBAAgB,IAChD,MAAM,IAAIuB,OAAO;IACjB;IACA,OAAOA,OAAO,CAACC,IAAI,KAAK,UAAU;EAEtC;;AAhEF5B,OAAA,CAAAC,OAAA,GAAAA,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}