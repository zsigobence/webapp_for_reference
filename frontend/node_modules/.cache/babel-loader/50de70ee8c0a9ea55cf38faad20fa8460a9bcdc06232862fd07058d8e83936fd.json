{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSocket = exports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.performInitialHandshake = exports.makeConnection = exports.connect = void 0;\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst constants_1 = require(\"../constants\");\nconst deps_1 = require(\"../deps\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst auth_provider_1 = require(\"./auth/auth_provider\");\nconst providers_1 = require(\"./auth/providers\");\nconst connection_1 = require(\"./connection\");\nconst constants_2 = require(\"./wire_protocol/constants\");\nasync function connect(options) {\n  let connection = null;\n  try {\n    const socket = await makeSocket(options);\n    connection = makeConnection(options, socket);\n    await performInitialHandshake(connection, options);\n    return connection;\n  } catch (error) {\n    connection?.destroy();\n    throw error;\n  }\n}\nexports.connect = connect;\nfunction makeConnection(options, socket) {\n  let ConnectionType = options.connectionType ?? connection_1.Connection;\n  if (options.autoEncrypter) {\n    ConnectionType = connection_1.CryptoConnection;\n  }\n  return new ConnectionType(socket, options);\n}\nexports.makeConnection = makeConnection;\nfunction checkSupportedServer(hello, options) {\n  const maxWireVersion = Number(hello.maxWireVersion);\n  const minWireVersion = Number(hello.minWireVersion);\n  const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n    const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n  }\n  const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n  return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n  const credentials = options.credentials;\n  if (credentials) {\n    if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) && !options.authProviders.getOrCreateProvider(credentials.mechanism, credentials.mechanismProperties)) {\n      throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n    }\n  }\n  const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n  conn.authContext = authContext;\n  const handshakeDoc = await prepareHandshakeDocument(authContext);\n  // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n  const handshakeOptions = {\n    ...options,\n    raw: false\n  };\n  if (typeof options.connectTimeoutMS === 'number') {\n    // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n    handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n  }\n  const start = new Date().getTime();\n  const response = await conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n  if (!('isWritablePrimary' in response)) {\n    // Provide hello-style response document.\n    response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n  }\n  if (response.helloOk) {\n    conn.helloOk = true;\n  }\n  const supportedServerErr = checkSupportedServer(response, options);\n  if (supportedServerErr) {\n    throw supportedServerErr;\n  }\n  if (options.loadBalanced) {\n    if (!response.serviceId) {\n      throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' + 'but the server does not support this mode.');\n    }\n  }\n  // NOTE: This is metadata attached to the connection while porting away from\n  //       handshake being done in the `Server` class. Likely, it should be\n  //       relocated, or at very least restructured.\n  conn.hello = response;\n  conn.lastHelloMS = new Date().getTime() - start;\n  if (!response.arbiterOnly && credentials) {\n    // store the response on auth context\n    authContext.response = response;\n    const resolvedCredentials = credentials.resolveAuthMechanism(response);\n    const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n    if (!provider) {\n      throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n    }\n    try {\n      await provider.auth(authContext);\n    } catch (error) {\n      if (error instanceof error_1.MongoError) {\n        error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion)) {\n          error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n        }\n      }\n      throw error;\n    }\n  }\n  // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n  // Once connection is established, command logging can log events (if enabled)\n  conn.established = true;\n}\nexports.performInitialHandshake = performInitialHandshake;\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n  const options = authContext.options;\n  const compressors = options.compressors ? options.compressors : [];\n  const {\n    serverApi\n  } = authContext.connection;\n  const clientMetadata = await options.extendedMetadata;\n  const handshakeDoc = {\n    [serverApi?.version || options.loadBalanced === true ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n    helloOk: true,\n    client: clientMetadata,\n    compression: compressors\n  };\n  if (options.loadBalanced === true) {\n    handshakeDoc.loadBalanced = true;\n  }\n  const credentials = authContext.credentials;\n  if (credentials) {\n    if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n      handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n      const provider = authContext.options.authProviders.getOrCreateProvider(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, credentials.mechanismProperties);\n      if (!provider) {\n        // This auth mechanism is always present.\n        throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n      }\n      return await provider.prepare(handshakeDoc, authContext);\n    }\n    const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism, credentials.mechanismProperties);\n    if (!provider) {\n      throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n    }\n    return await provider.prepare(handshakeDoc, authContext);\n  }\n  return handshakeDoc;\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = ['ALPNProtocols', 'ca', 'cert', 'checkServerIdentity', 'ciphers', 'crl', 'ecdhCurve', 'key', 'minDHSize', 'passphrase', 'pfx', 'rejectUnauthorized', 'secureContext', 'secureProtocol', 'servername', 'session'];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = ['family', 'hints', 'localAddress', 'localPort', 'lookup'];\nfunction parseConnectOptions(options) {\n  const hostAddress = options.hostAddress;\n  if (!hostAddress) throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n  const result = {};\n  for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      result[name] = options[name];\n    }\n  }\n  if (typeof hostAddress.socketPath === 'string') {\n    result.path = hostAddress.socketPath;\n    return result;\n  } else if (typeof hostAddress.host === 'string') {\n    result.host = hostAddress.host;\n    result.port = hostAddress.port;\n    return result;\n  } else {\n    // This should never happen since we set up HostAddresses\n    // But if we don't throw here the socket could hang until timeout\n    // TODO(NODE-3483)\n    throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n  }\n}\nfunction parseSslOptions(options) {\n  const result = parseConnectOptions(options);\n  // Merge in valid SSL options\n  for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      result[name] = options[name];\n    }\n  }\n  if (options.existingSocket) {\n    result.socket = options.existingSocket;\n  }\n  // Set default sni servername to be the same as host\n  if (result.servername == null && result.host && !net.isIP(result.host)) {\n    result.servername = result.host;\n  }\n  return result;\n}\nasync function makeSocket(options) {\n  const useTLS = options.tls ?? false;\n  const noDelay = options.noDelay ?? true;\n  const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n  const existingSocket = options.existingSocket;\n  let socket;\n  if (options.proxyHost != null) {\n    // Currently, only Socks5 is supported.\n    return await makeSocks5Connection({\n      ...options,\n      connectTimeoutMS // Should always be present for Socks5\n    });\n  }\n  if (useTLS) {\n    const tlsSocket = tls.connect(parseSslOptions(options));\n    if (typeof tlsSocket.disableRenegotiation === 'function') {\n      tlsSocket.disableRenegotiation();\n    }\n    socket = tlsSocket;\n  } else if (existingSocket) {\n    // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n    // so we only need to handle the non-TLS case here (where existingSocket\n    // gives us all we need out of the box).\n    socket = existingSocket;\n  } else {\n    socket = net.createConnection(parseConnectOptions(options));\n  }\n  socket.setKeepAlive(true, 300000);\n  socket.setTimeout(connectTimeoutMS);\n  socket.setNoDelay(noDelay);\n  let cancellationHandler = null;\n  const {\n    promise: connectedSocket,\n    resolve,\n    reject\n  } = (0, utils_1.promiseWithResolvers)();\n  if (existingSocket) {\n    resolve(socket);\n  } else {\n    const connectEvent = useTLS ? 'secureConnect' : 'connect';\n    socket.once(connectEvent, () => resolve(socket)).once('error', error => reject(connectionFailureError('error', error))).once('timeout', () => reject(connectionFailureError('timeout'))).once('close', () => reject(connectionFailureError('close')));\n    if (options.cancellationToken != null) {\n      cancellationHandler = () => reject(connectionFailureError('cancel'));\n      options.cancellationToken.once('cancel', cancellationHandler);\n    }\n  }\n  try {\n    socket = await connectedSocket;\n    return socket;\n  } catch (error) {\n    socket.destroy();\n    throw error;\n  } finally {\n    socket.setTimeout(0);\n    socket.removeAllListeners();\n    if (cancellationHandler != null) {\n      options.cancellationToken?.removeListener('cancel', cancellationHandler);\n    }\n  }\n}\nexports.makeSocket = makeSocket;\nlet socks = null;\nfunction loadSocks() {\n  if (socks == null) {\n    const socksImport = (0, deps_1.getSocks)();\n    if ('kModuleError' in socksImport) {\n      throw socksImport.kModuleError;\n    }\n    socks = socksImport;\n  }\n  return socks;\n}\nasync function makeSocks5Connection(options) {\n  const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '',\n  // proxyHost is guaranteed to set here\n  options.proxyPort ?? 1080);\n  // First, connect to the proxy server itself:\n  const rawSocket = await makeSocket({\n    ...options,\n    hostAddress,\n    tls: false,\n    proxyHost: undefined\n  });\n  const destination = parseConnectOptions(options);\n  if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n    throw new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n  }\n  socks ??= loadSocks();\n  try {\n    // Then, establish the Socks5 proxy connection:\n    const {\n      socket\n    } = await socks.SocksClient.createConnection({\n      existing_socket: rawSocket,\n      timeout: options.connectTimeoutMS,\n      command: 'connect',\n      destination: {\n        host: destination.host,\n        port: destination.port\n      },\n      proxy: {\n        // host and port are ignored because we pass existing_socket\n        host: 'iLoveJavaScript',\n        port: 0,\n        type: 5,\n        userId: options.proxyUsername || undefined,\n        password: options.proxyPassword || undefined\n      }\n    });\n    // Finally, now treat the resulting duplex stream as the\n    // socket over which we send and receive wire protocol messages:\n    return await makeSocket({\n      ...options,\n      existingSocket: socket,\n      proxyHost: undefined\n    });\n  } catch (error) {\n    throw connectionFailureError('error', error);\n  }\n}\nfunction connectionFailureError(type, cause) {\n  switch (type) {\n    case 'error':\n      return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), {\n        cause\n      });\n    case 'timeout':\n      return new error_1.MongoNetworkTimeoutError('connection timed out');\n    case 'close':\n      return new error_1.MongoNetworkError('connection closed');\n    case 'cancel':\n      return new error_1.MongoNetworkError('connection establishment was cancelled');\n    default:\n      return new error_1.MongoNetworkError('unknown network error');\n  }\n}","map":{"version":3,"names":["net","require","tls","constants_1","deps_1","error_1","utils_1","auth_provider_1","providers_1","connection_1","constants_2","connect","options","connection","socket","makeSocket","makeConnection","performInitialHandshake","error","destroy","exports","ConnectionType","connectionType","Connection","autoEncrypter","CryptoConnection","checkSupportedServer","hello","maxWireVersion","Number","minWireVersion","serverVersionHighEnough","isNaN","MIN_SUPPORTED_WIRE_VERSION","serverVersionLowEnough","MAX_SUPPORTED_WIRE_VERSION","message","hostAddress","JSON","stringify","MAX_SUPPORTED_SERVER_VERSION","MongoCompatibilityError","MIN_SUPPORTED_SERVER_VERSION","conn","credentials","mechanism","AuthMechanism","MONGODB_DEFAULT","authProviders","getOrCreateProvider","mechanismProperties","MongoInvalidArgumentError","authContext","AuthContext","handshakeDoc","prepareHandshakeDocument","handshakeOptions","raw","connectTimeoutMS","socketTimeoutMS","start","Date","getTime","response","command","ns","isWritablePrimary","LEGACY_HELLO_COMMAND","helloOk","supportedServerErr","loadBalanced","serviceId","lastHelloMS","arbiterOnly","resolvedCredentials","resolveAuthMechanism","provider","auth","MongoError","addErrorLabel","MongoErrorLabel","HandshakeError","needsRetryableWriteLabel","RetryableWriteError","established","compressors","serverApi","clientMetadata","extendedMetadata","version","client","compression","username","saslSupportedMechs","source","MONGODB_SCRAM_SHA256","prepare","LEGAL_TLS_SOCKET_OPTIONS","LEGAL_TCP_SOCKET_OPTIONS","parseConnectOptions","result","name","socketPath","path","host","port","MongoRuntimeError","parseSslOptions","existingSocket","servername","isIP","useTLS","noDelay","proxyHost","makeSocks5Connection","tlsSocket","disableRenegotiation","createConnection","setKeepAlive","setTimeout","setNoDelay","cancellationHandler","promise","connectedSocket","resolve","reject","promiseWithResolvers","connectEvent","once","connectionFailureError","cancellationToken","removeAllListeners","removeListener","socks","loadSocks","socksImport","getSocks","kModuleError","HostAddress","fromHostPort","proxyPort","rawSocket","undefined","destination","SocksClient","existing_socket","timeout","proxy","type","userId","proxyUsername","password","proxyPassword","cause","MongoNetworkError","buildErrorMessage","MongoNetworkTimeoutError"],"sources":["D:\\School\\referencia\\webapp\\node_modules\\mongodb\\src\\cmap\\connect.ts"],"sourcesContent":["import type { Socket, SocketConnectOpts } from 'net';\nimport * as net from 'net';\nimport type { ConnectionOptions as TLSConnectionOpts, TLSSocket } from 'tls';\nimport * as tls from 'tls';\n\nimport type { Document } from '../bson';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { getSocks, type SocksLib } from '../deps';\nimport {\n  MongoCompatibilityError,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  needsRetryableWriteLabel\n} from '../error';\nimport { HostAddress, ns, promiseWithResolvers } from '../utils';\nimport { AuthContext } from './auth/auth_provider';\nimport { AuthMechanism } from './auth/providers';\nimport {\n  type CommandOptions,\n  Connection,\n  type ConnectionOptions,\n  CryptoConnection\n} from './connection';\nimport {\n  MAX_SUPPORTED_SERVER_VERSION,\n  MAX_SUPPORTED_WIRE_VERSION,\n  MIN_SUPPORTED_SERVER_VERSION,\n  MIN_SUPPORTED_WIRE_VERSION\n} from './wire_protocol/constants';\n\n/** @public */\nexport type Stream = Socket | TLSSocket;\n\nexport async function connect(options: ConnectionOptions): Promise<Connection> {\n  let connection: Connection | null = null;\n  try {\n    const socket = await makeSocket(options);\n    connection = makeConnection(options, socket);\n    await performInitialHandshake(connection, options);\n    return connection;\n  } catch (error) {\n    connection?.destroy();\n    throw error;\n  }\n}\n\nexport function makeConnection(options: ConnectionOptions, socket: Stream): Connection {\n  let ConnectionType = options.connectionType ?? Connection;\n  if (options.autoEncrypter) {\n    ConnectionType = CryptoConnection;\n  }\n\n  return new ConnectionType(socket, options);\n}\n\nfunction checkSupportedServer(hello: Document, options: ConnectionOptions) {\n  const maxWireVersion = Number(hello.maxWireVersion);\n  const minWireVersion = Number(hello.minWireVersion);\n  const serverVersionHighEnough =\n    !Number.isNaN(maxWireVersion) && maxWireVersion >= MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough =\n    !Number.isNaN(minWireVersion) && minWireVersion <= MAX_SUPPORTED_WIRE_VERSION;\n\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n\n    const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(\n      hello.minWireVersion\n    )}, but this version of the Node.js Driver requires at most ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n    return new MongoCompatibilityError(message);\n  }\n\n  const message = `Server at ${options.hostAddress} reports maximum wire version ${\n    JSON.stringify(hello.maxWireVersion) ?? 0\n  }, but this version of the Node.js Driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION})`;\n  return new MongoCompatibilityError(message);\n}\n\nexport async function performInitialHandshake(\n  conn: Connection,\n  options: ConnectionOptions\n): Promise<void> {\n  const credentials = options.credentials;\n\n  if (credentials) {\n    if (\n      !(credentials.mechanism === AuthMechanism.MONGODB_DEFAULT) &&\n      !options.authProviders.getOrCreateProvider(\n        credentials.mechanism,\n        credentials.mechanismProperties\n      )\n    ) {\n      throw new MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n    }\n  }\n\n  const authContext = new AuthContext(conn, credentials, options);\n  conn.authContext = authContext;\n\n  const handshakeDoc = await prepareHandshakeDocument(authContext);\n\n  // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n  const handshakeOptions: CommandOptions = { ...options, raw: false };\n  if (typeof options.connectTimeoutMS === 'number') {\n    // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n    handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n  }\n\n  const start = new Date().getTime();\n  const response = await conn.command(ns('admin.$cmd'), handshakeDoc, handshakeOptions);\n\n  if (!('isWritablePrimary' in response)) {\n    // Provide hello-style response document.\n    response.isWritablePrimary = response[LEGACY_HELLO_COMMAND];\n  }\n\n  if (response.helloOk) {\n    conn.helloOk = true;\n  }\n\n  const supportedServerErr = checkSupportedServer(response, options);\n  if (supportedServerErr) {\n    throw supportedServerErr;\n  }\n\n  if (options.loadBalanced) {\n    if (!response.serviceId) {\n      throw new MongoCompatibilityError(\n        'Driver attempted to initialize in load balancing mode, ' +\n          'but the server does not support this mode.'\n      );\n    }\n  }\n\n  // NOTE: This is metadata attached to the connection while porting away from\n  //       handshake being done in the `Server` class. Likely, it should be\n  //       relocated, or at very least restructured.\n  conn.hello = response;\n  conn.lastHelloMS = new Date().getTime() - start;\n\n  if (!response.arbiterOnly && credentials) {\n    // store the response on auth context\n    authContext.response = response;\n\n    const resolvedCredentials = credentials.resolveAuthMechanism(response);\n    const provider = options.authProviders.getOrCreateProvider(\n      resolvedCredentials.mechanism,\n      resolvedCredentials.mechanismProperties\n    );\n    if (!provider) {\n      throw new MongoInvalidArgumentError(\n        `No AuthProvider for ${resolvedCredentials.mechanism} defined.`\n      );\n    }\n\n    try {\n      await provider.auth(authContext);\n    } catch (error) {\n      if (error instanceof MongoError) {\n        error.addErrorLabel(MongoErrorLabel.HandshakeError);\n        if (needsRetryableWriteLabel(error, response.maxWireVersion)) {\n          error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n        }\n      }\n      throw error;\n    }\n  }\n\n  // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n  // Once connection is established, command logging can log events (if enabled)\n  conn.established = true;\n}\n\n/**\n * HandshakeDocument used during authentication.\n * @internal\n */\nexport interface HandshakeDocument extends Document {\n  /**\n   * @deprecated Use hello instead\n   */\n  ismaster?: boolean;\n  hello?: boolean;\n  helloOk?: boolean;\n  client: Document;\n  compression: string[];\n  saslSupportedMechs?: string;\n  loadBalanced?: boolean;\n}\n\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nexport async function prepareHandshakeDocument(\n  authContext: AuthContext\n): Promise<HandshakeDocument> {\n  const options = authContext.options;\n  const compressors = options.compressors ? options.compressors : [];\n  const { serverApi } = authContext.connection;\n  const clientMetadata: Document = await options.extendedMetadata;\n\n  const handshakeDoc: HandshakeDocument = {\n    [serverApi?.version || options.loadBalanced === true ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n    helloOk: true,\n    client: clientMetadata,\n    compression: compressors\n  };\n\n  if (options.loadBalanced === true) {\n    handshakeDoc.loadBalanced = true;\n  }\n\n  const credentials = authContext.credentials;\n  if (credentials) {\n    if (credentials.mechanism === AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n      handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n\n      const provider = authContext.options.authProviders.getOrCreateProvider(\n        AuthMechanism.MONGODB_SCRAM_SHA256,\n        credentials.mechanismProperties\n      );\n      if (!provider) {\n        // This auth mechanism is always present.\n        throw new MongoInvalidArgumentError(\n          `No AuthProvider for ${AuthMechanism.MONGODB_SCRAM_SHA256} defined.`\n        );\n      }\n      return await provider.prepare(handshakeDoc, authContext);\n    }\n    const provider = authContext.options.authProviders.getOrCreateProvider(\n      credentials.mechanism,\n      credentials.mechanismProperties\n    );\n    if (!provider) {\n      throw new MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n    }\n    return await provider.prepare(handshakeDoc, authContext);\n  }\n  return handshakeDoc;\n}\n\n/** @public */\nexport const LEGAL_TLS_SOCKET_OPTIONS = [\n  'ALPNProtocols',\n  'ca',\n  'cert',\n  'checkServerIdentity',\n  'ciphers',\n  'crl',\n  'ecdhCurve',\n  'key',\n  'minDHSize',\n  'passphrase',\n  'pfx',\n  'rejectUnauthorized',\n  'secureContext',\n  'secureProtocol',\n  'servername',\n  'session'\n] as const;\n\n/** @public */\nexport const LEGAL_TCP_SOCKET_OPTIONS = [\n  'family',\n  'hints',\n  'localAddress',\n  'localPort',\n  'lookup'\n] as const;\n\nfunction parseConnectOptions(options: ConnectionOptions): SocketConnectOpts {\n  const hostAddress = options.hostAddress;\n  if (!hostAddress) throw new MongoInvalidArgumentError('Option \"hostAddress\" is required');\n\n  const result: Partial<net.TcpNetConnectOpts & net.IpcNetConnectOpts> = {};\n  for (const name of LEGAL_TCP_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      (result as Document)[name] = options[name];\n    }\n  }\n\n  if (typeof hostAddress.socketPath === 'string') {\n    result.path = hostAddress.socketPath;\n    return result as net.IpcNetConnectOpts;\n  } else if (typeof hostAddress.host === 'string') {\n    result.host = hostAddress.host;\n    result.port = hostAddress.port;\n    return result as net.TcpNetConnectOpts;\n  } else {\n    // This should never happen since we set up HostAddresses\n    // But if we don't throw here the socket could hang until timeout\n    // TODO(NODE-3483)\n    throw new MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n  }\n}\n\ntype MakeConnectionOptions = ConnectionOptions & { existingSocket?: Stream };\n\nfunction parseSslOptions(options: MakeConnectionOptions): TLSConnectionOpts {\n  const result: TLSConnectionOpts = parseConnectOptions(options);\n  // Merge in valid SSL options\n  for (const name of LEGAL_TLS_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      (result as Document)[name] = options[name];\n    }\n  }\n\n  if (options.existingSocket) {\n    result.socket = options.existingSocket;\n  }\n\n  // Set default sni servername to be the same as host\n  if (result.servername == null && result.host && !net.isIP(result.host)) {\n    result.servername = result.host;\n  }\n\n  return result;\n}\n\nexport async function makeSocket(options: MakeConnectionOptions): Promise<Stream> {\n  const useTLS = options.tls ?? false;\n  const noDelay = options.noDelay ?? true;\n  const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n  const existingSocket = options.existingSocket;\n\n  let socket: Stream;\n\n  if (options.proxyHost != null) {\n    // Currently, only Socks5 is supported.\n    return await makeSocks5Connection({\n      ...options,\n      connectTimeoutMS // Should always be present for Socks5\n    });\n  }\n\n  if (useTLS) {\n    const tlsSocket = tls.connect(parseSslOptions(options));\n    if (typeof tlsSocket.disableRenegotiation === 'function') {\n      tlsSocket.disableRenegotiation();\n    }\n    socket = tlsSocket;\n  } else if (existingSocket) {\n    // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n    // so we only need to handle the non-TLS case here (where existingSocket\n    // gives us all we need out of the box).\n    socket = existingSocket;\n  } else {\n    socket = net.createConnection(parseConnectOptions(options));\n  }\n\n  socket.setKeepAlive(true, 300000);\n  socket.setTimeout(connectTimeoutMS);\n  socket.setNoDelay(noDelay);\n\n  let cancellationHandler: ((err: Error) => void) | null = null;\n\n  const { promise: connectedSocket, resolve, reject } = promiseWithResolvers<Stream>();\n  if (existingSocket) {\n    resolve(socket);\n  } else {\n    const connectEvent = useTLS ? 'secureConnect' : 'connect';\n    socket\n      .once(connectEvent, () => resolve(socket))\n      .once('error', error => reject(connectionFailureError('error', error)))\n      .once('timeout', () => reject(connectionFailureError('timeout')))\n      .once('close', () => reject(connectionFailureError('close')));\n\n    if (options.cancellationToken != null) {\n      cancellationHandler = () => reject(connectionFailureError('cancel'));\n      options.cancellationToken.once('cancel', cancellationHandler);\n    }\n  }\n\n  try {\n    socket = await connectedSocket;\n    return socket;\n  } catch (error) {\n    socket.destroy();\n    throw error;\n  } finally {\n    socket.setTimeout(0);\n    socket.removeAllListeners();\n    if (cancellationHandler != null) {\n      options.cancellationToken?.removeListener('cancel', cancellationHandler);\n    }\n  }\n}\n\nlet socks: SocksLib | null = null;\nfunction loadSocks() {\n  if (socks == null) {\n    const socksImport = getSocks();\n    if ('kModuleError' in socksImport) {\n      throw socksImport.kModuleError;\n    }\n    socks = socksImport;\n  }\n  return socks;\n}\n\nasync function makeSocks5Connection(options: MakeConnectionOptions): Promise<Stream> {\n  const hostAddress = HostAddress.fromHostPort(\n    options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080\n  );\n\n  // First, connect to the proxy server itself:\n  const rawSocket = await makeSocket({\n    ...options,\n    hostAddress,\n    tls: false,\n    proxyHost: undefined\n  });\n\n  const destination = parseConnectOptions(options) as net.TcpNetConnectOpts;\n  if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n    throw new MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n  }\n\n  socks ??= loadSocks();\n\n  try {\n    // Then, establish the Socks5 proxy connection:\n    const { socket } = await socks.SocksClient.createConnection({\n      existing_socket: rawSocket,\n      timeout: options.connectTimeoutMS,\n      command: 'connect',\n      destination: {\n        host: destination.host,\n        port: destination.port\n      },\n      proxy: {\n        // host and port are ignored because we pass existing_socket\n        host: 'iLoveJavaScript',\n        port: 0,\n        type: 5,\n        userId: options.proxyUsername || undefined,\n        password: options.proxyPassword || undefined\n      }\n    });\n\n    // Finally, now treat the resulting duplex stream as the\n    // socket over which we send and receive wire protocol messages:\n    return await makeSocket({\n      ...options,\n      existingSocket: socket,\n      proxyHost: undefined\n    });\n  } catch (error) {\n    throw connectionFailureError('error', error);\n  }\n}\n\nfunction connectionFailureError(type: 'error', cause: Error): MongoNetworkError;\nfunction connectionFailureError(type: 'close' | 'timeout' | 'cancel'): MongoNetworkError;\nfunction connectionFailureError(\n  type: 'error' | 'close' | 'timeout' | 'cancel',\n  cause?: Error\n): MongoNetworkError {\n  switch (type) {\n    case 'error':\n      return new MongoNetworkError(MongoError.buildErrorMessage(cause), { cause });\n    case 'timeout':\n      return new MongoNetworkTimeoutError('connection timed out');\n    case 'close':\n      return new MongoNetworkError('connection closed');\n    case 'cancel':\n      return new MongoNetworkError('connection establishment was cancelled');\n    default:\n      return new MongoNetworkError('unknown network error');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}