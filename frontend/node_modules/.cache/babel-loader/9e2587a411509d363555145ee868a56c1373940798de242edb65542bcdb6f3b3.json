{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst errors_1 = require(\"../cmap/errors\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.topology = topology;\n    this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n    this.s = {\n      description,\n      options,\n      state: common_1.STATE_CLOSED,\n      operationCount: 0\n    };\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.pool.on(event, e => this.emit(event, e));\n    }\n    this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n    if (this.loadBalanced) {\n      this.monitor = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n    // create the monitor\n    this.monitor = new monitor_1.Monitor(this, this.s.options);\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      this.monitor.on(event, e => this.emit(event, e));\n    }\n    this.monitor.on('resetServer', error => markServerUnknown(this, error));\n    this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: this.monitor?.roundTripTime,\n        minRoundTripTime: this.monitor?.minRoundTripTime\n      }));\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n  get clusterTime() {\n    return this.topology.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.topology.clusterTime = clusterTime;\n  }\n  get description() {\n    return this.s.description;\n  }\n  get name() {\n    return this.s.description.address;\n  }\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n  get loadBalanced() {\n    return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this.monitor?.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n  destroy() {\n    if (this.s.state === common_1.STATE_CLOSED) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    if (!this.loadBalanced) {\n      this.monitor?.close();\n    }\n    this.pool.close();\n    stateTransition(this, common_1.STATE_CLOSED);\n    this.emit('closed');\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck() {\n    if (!this.loadBalanced) {\n      this.monitor?.requestCheck();\n    }\n  }\n  async command(ns, cmd, options, responseType) {\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      throw new error_1.MongoServerClosedError();\n    }\n    // Clone the options\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false,\n      directConnection: this.topology.s.options.directConnection\n    });\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n    const session = finalOptions.session;\n    let conn = session?.pinnedConnection;\n    this.incrementOperationCount();\n    if (conn == null) {\n      try {\n        conn = await this.pool.checkOut();\n        if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n          session?.pin(conn);\n        }\n      } catch (checkoutError) {\n        this.decrementOperationCount();\n        if (!(checkoutError instanceof errors_1.PoolClearedError)) this.handleError(checkoutError);\n        throw checkoutError;\n      }\n    }\n    try {\n      try {\n        const res = await conn.command(ns, cmd, finalOptions, responseType);\n        (0, write_concern_1.throwIfWriteConcernError)(res);\n        return res;\n      } catch (commandError) {\n        throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n      }\n    } catch (operationError) {\n      if (operationError instanceof error_1.MongoError && operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n        await this.pool.reauthenticate(conn);\n        try {\n          const res = await conn.command(ns, cmd, finalOptions, responseType);\n          (0, write_concern_1.throwIfWriteConcernError)(res);\n          return res;\n        } catch (commandError) {\n          throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n        }\n      } else {\n        throw operationError;\n      }\n    } finally {\n      this.decrementOperationCount();\n      if (session?.pinnedConnection !== conn) {\n        this.pool.checkIn(conn);\n      }\n    }\n  }\n  /**\n   * Handle SDAM error\n   * @internal\n   */\n  handleError(error, connection) {\n    if (!(error instanceof error_1.MongoError)) {\n      return;\n    }\n    const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n    if (isStaleError) {\n      return;\n    }\n    const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n    const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n    const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n      // In load balanced mode we never mark the server as unknown and always\n      // clear for the specific service id.\n      if (!this.loadBalanced) {\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        markServerUnknown(this, error);\n      } else if (connection) {\n        this.pool.clear({\n          serviceId: connection.serviceId\n        });\n      }\n    } else {\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(this, error)) {\n          const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n          if (this.loadBalanced && connection && shouldClearPool) {\n            this.pool.clear({\n              serviceId: connection.serviceId\n            });\n          }\n          if (!this.loadBalanced) {\n            if (shouldClearPool) {\n              error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n            }\n            markServerUnknown(this, error);\n            process.nextTick(() => this.requestCheck());\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Ensure that error is properly decorated and internal state is updated before throwing\n   * @internal\n   */\n  decorateCommandError(connection, cmd, options, error) {\n    if (typeof error !== 'object' || error == null || !('name' in error)) {\n      throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);\n    }\n    if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {\n      error = error.cause;\n    }\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return error;\n    }\n    if (connectionIsStale(this.pool, connection)) {\n      return error;\n    }\n    const session = options?.session;\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n      // inActiveTransaction check handles commit and abort.\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n      if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(this) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    }\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n    this.handleError(error, connection);\n    return error;\n  }\n  /**\n   * Decrement the operation count, returning the new count.\n   */\n  decrementOperationCount() {\n    return this.s.operationCount -= 1;\n  }\n  /**\n   * Increment the operation count, returning the new count.\n   */\n  incrementOperationCount() {\n    return this.s.operationCount += 1;\n  }\n}\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    server.monitor?.reset();\n  }\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error\n  }));\n}\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || session.transaction.isCommitted && 'commitTransaction' in cmd || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n  return false;\n}\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n  return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}","map":{"version":3,"names":["connection_1","require","connection_pool_1","errors_1","constants_1","error_1","mongo_types_1","transactions_1","utils_1","write_concern_1","common_1","monitor_1","server_description_1","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","Server","TypedEventEmitter","constructor","topology","description","options","serverApi","poolOptions","hostAddress","pool","ConnectionPool","s","state","operationCount","event","CMAP_EVENTS","APM_EVENTS","on","e","emit","Connection","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","monitor","Monitor","HEARTBEAT_EVENTS","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","ServerDescription","reply","roundTripTime","minRoundTripTime","CONNECT","name","address","autoEncrypter","type","TopologyType","LoadBalanced","connect","destroy","close","requestCheck","command","ns","cmd","responseType","db","MongoInvalidArgumentError","MongoServerClosedError","finalOptions","Object","assign","wireProtocolCommand","directConnection","omitReadPreference","readPreference","session","conn","pinnedConnection","incrementOperationCount","checkOut","isPinnableCommand","pin","checkoutError","decrementOperationCount","PoolClearedError","handleError","res","throwIfWriteConcernError","commandError","decorateCommandError","operationError","MongoError","code","MONGODB_ERROR_CODES","Reauthenticate","reauthenticate","checkIn","connection","isStaleError","connectionGeneration","generation","isNetworkNonTimeoutError","MongoNetworkError","MongoNetworkTimeoutError","isNetworkTimeoutBeforeHandshakeError","isNetworkErrorBeforeHandshake","isAuthHandshakeError","hasErrorLabel","MongoErrorLabel","HandshakeError","addErrorLabel","ResetPool","clear","serviceId","isSDAMUnrecoverableError","shouldHandleStateChangeError","shouldClearPool","maxWireVersion","isNodeShuttingDownError","process","nextTick","MongoRuntimeError","cause","connectionIsStale","hasEnded","serverSession","isDirty","inActiveTransaction","TransientTransactionError","isRetryableWritesEnabled","isTransactionCommand","supportsRetryableWrites","RetryableWriteError","needsRetryableWriteLabel","isPinned","unpin","force","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_FAILED","CLOSED","ENDED","exports","server","reset","undefined","inTransaction","transaction","isCommitted","serviceGenerations","get","toHexString","err","etv","topologyVersion","stv","compareTopologyVersion","retryWrites"],"sources":["D:\\School\\referencia\\webapp\\node_modules\\mongodb\\src\\sdam\\server.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { type AutoEncrypter } from '../client-side-encryption/auto_encrypter';\nimport { type CommandOptions, Connection } from '../cmap/connection';\nimport {\n  ConnectionPool,\n  type ConnectionPoolEvents,\n  type ConnectionPoolOptions\n} from '../cmap/connection_pool';\nimport { PoolClearedError } from '../cmap/errors';\nimport { type MongoDBResponseConstructor } from '../cmap/wire_protocol/responses';\nimport {\n  APM_EVENTS,\n  CLOSED,\n  CMAP_EVENTS,\n  CONNECT,\n  DESCRIPTION_RECEIVED,\n  ENDED,\n  HEARTBEAT_EVENTS,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED\n} from '../constants';\nimport {\n  type AnyError,\n  isNetworkErrorBeforeHandshake,\n  isNodeShuttingDownError,\n  isSDAMUnrecoverableError,\n  MONGODB_ERROR_CODES,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  MongoServerClosedError,\n  type MongoServerError,\n  needsRetryableWriteLabel\n} from '../error';\nimport type { ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport type { GetMoreOptions } from '../operations/get_more';\nimport type { ClientSession } from '../sessions';\nimport { isTransactionCommand } from '../transactions';\nimport {\n  type EventEmitterWithState,\n  makeStateMachine,\n  maxWireVersion,\n  type MongoDBNamespace,\n  supportsRetryableWrites\n} from '../utils';\nimport { throwIfWriteConcernError } from '../write_concern';\nimport {\n  type ClusterTime,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TopologyType\n} from './common';\nimport type {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Monitor, type MonitorOptions } from './monitor';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport type { Topology } from './topology';\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nexport type ServerOptions = Omit<ConnectionPoolOptions, 'id' | 'generation' | 'hostAddress'> &\n  MonitorOptions;\n\n/** @internal */\nexport interface ServerPrivate {\n  /** The server description for this server */\n  description: ServerDescription;\n  /** A copy of the options used to construct this instance */\n  options: ServerOptions;\n  /** The current state of the Server */\n  state: string;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  /** A count of the operations currently running against the server. */\n  operationCount: number;\n}\n\n/** @public */\nexport type ServerEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(server: Server): void;\n  descriptionReceived(description: ServerDescription): void;\n  closed(): void;\n  ended(): void;\n} & ConnectionPoolEvents &\n  EventEmitterWithState;\n\n/** @internal */\nexport class Server extends TypedEventEmitter<ServerEvents> {\n  /** @internal */\n  s: ServerPrivate;\n  /** @internal */\n  topology: Topology;\n  /** @internal */\n  pool: ConnectionPool;\n  serverApi?: ServerApi;\n  hello?: Document;\n  monitor: Monitor | null;\n\n  /** @event */\n  static readonly SERVER_HEARTBEAT_STARTED = SERVER_HEARTBEAT_STARTED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_SUCCEEDED = SERVER_HEARTBEAT_SUCCEEDED;\n  /** @event */\n  static readonly SERVER_HEARTBEAT_FAILED = SERVER_HEARTBEAT_FAILED;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly DESCRIPTION_RECEIVED = DESCRIPTION_RECEIVED;\n  /** @event */\n  static readonly CLOSED = CLOSED;\n  /** @event */\n  static readonly ENDED = ENDED;\n\n  /**\n   * Create a server\n   */\n  constructor(topology: Topology, description: ServerDescription, options: ServerOptions) {\n    super();\n\n    this.serverApi = options.serverApi;\n\n    const poolOptions = { hostAddress: description.hostAddress, ...options };\n\n    this.topology = topology;\n    this.pool = new ConnectionPool(this, poolOptions);\n\n    this.s = {\n      description,\n      options,\n      state: STATE_CLOSED,\n      operationCount: 0\n    };\n\n    for (const event of [...CMAP_EVENTS, ...APM_EVENTS]) {\n      this.pool.on(event, (e: any) => this.emit(event, e));\n    }\n\n    this.pool.on(Connection.CLUSTER_TIME_RECEIVED, (clusterTime: ClusterTime) => {\n      this.clusterTime = clusterTime;\n    });\n\n    if (this.loadBalanced) {\n      this.monitor = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n\n    // create the monitor\n    this.monitor = new Monitor(this, this.s.options);\n\n    for (const event of HEARTBEAT_EVENTS) {\n      this.monitor.on(event, (e: any) => this.emit(event, e));\n    }\n\n    this.monitor.on('resetServer', (error: MongoServerError) => markServerUnknown(this, error));\n    this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event: ServerHeartbeatSucceededEvent) => {\n      this.emit(\n        Server.DESCRIPTION_RECEIVED,\n        new ServerDescription(this.description.hostAddress, event.reply, {\n          roundTripTime: this.monitor?.roundTripTime,\n          minRoundTripTime: this.monitor?.minRoundTripTime\n        })\n      );\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.topology.clusterTime = clusterTime;\n  }\n\n  get description(): ServerDescription {\n    return this.s.description;\n  }\n\n  get name(): string {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter(): AutoEncrypter | undefined {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n\n  get loadBalanced(): boolean {\n    return this.topology.description.type === TopologyType.LoadBalanced;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this.monitor?.connect();\n    } else {\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n\n  /** Destroy the server connection */\n  destroy(): void {\n    if (this.s.state === STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this.monitor?.close();\n    }\n\n    this.pool.close();\n    stateTransition(this, STATE_CLOSED);\n    this.emit('closed');\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck(): void {\n    if (!this.loadBalanced) {\n      this.monitor?.requestCheck();\n    }\n  }\n\n  public async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions | undefined,\n    responseType: T | undefined\n  ): Promise<typeof responseType extends undefined ? Document : InstanceType<T>>;\n\n  public async command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options?: CommandOptions\n  ): Promise<Document>;\n\n  public async command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    responseType?: MongoDBResponseConstructor\n  ): Promise<Document> {\n    if (ns.db == null || typeof ns === 'string') {\n      throw new MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      throw new MongoServerClosedError();\n    }\n\n    // Clone the options\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false,\n      directConnection: this.topology.s.options.directConnection\n    });\n\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n\n    const session = finalOptions.session;\n    let conn = session?.pinnedConnection;\n\n    this.incrementOperationCount();\n    if (conn == null) {\n      try {\n        conn = await this.pool.checkOut();\n        if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n          session?.pin(conn);\n        }\n      } catch (checkoutError) {\n        this.decrementOperationCount();\n        if (!(checkoutError instanceof PoolClearedError)) this.handleError(checkoutError);\n        throw checkoutError;\n      }\n    }\n\n    try {\n      try {\n        const res = await conn.command(ns, cmd, finalOptions, responseType);\n        throwIfWriteConcernError(res);\n        return res;\n      } catch (commandError) {\n        throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n      }\n    } catch (operationError) {\n      if (\n        operationError instanceof MongoError &&\n        operationError.code === MONGODB_ERROR_CODES.Reauthenticate\n      ) {\n        await this.pool.reauthenticate(conn);\n        try {\n          const res = await conn.command(ns, cmd, finalOptions, responseType);\n          throwIfWriteConcernError(res);\n          return res;\n        } catch (commandError) {\n          throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n        }\n      } else {\n        throw operationError;\n      }\n    } finally {\n      this.decrementOperationCount();\n      if (session?.pinnedConnection !== conn) {\n        this.pool.checkIn(conn);\n      }\n    }\n  }\n\n  /**\n   * Handle SDAM error\n   * @internal\n   */\n  handleError(error: AnyError, connection?: Connection) {\n    if (!(error instanceof MongoError)) {\n      return;\n    }\n\n    const isStaleError =\n      error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n    if (isStaleError) {\n      return;\n    }\n\n    const isNetworkNonTimeoutError =\n      error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError);\n    const isNetworkTimeoutBeforeHandshakeError = isNetworkErrorBeforeHandshake(error);\n    const isAuthHandshakeError = error.hasErrorLabel(MongoErrorLabel.HandshakeError);\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n      // In load balanced mode we never mark the server as unknown and always\n      // clear for the specific service id.\n      if (!this.loadBalanced) {\n        error.addErrorLabel(MongoErrorLabel.ResetPool);\n        markServerUnknown(this, error);\n      } else if (connection) {\n        this.pool.clear({ serviceId: connection.serviceId });\n      }\n    } else {\n      if (isSDAMUnrecoverableError(error)) {\n        if (shouldHandleStateChangeError(this, error)) {\n          const shouldClearPool = maxWireVersion(this) <= 7 || isNodeShuttingDownError(error);\n          if (this.loadBalanced && connection && shouldClearPool) {\n            this.pool.clear({ serviceId: connection.serviceId });\n          }\n\n          if (!this.loadBalanced) {\n            if (shouldClearPool) {\n              error.addErrorLabel(MongoErrorLabel.ResetPool);\n            }\n            markServerUnknown(this, error);\n            process.nextTick(() => this.requestCheck());\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Ensure that error is properly decorated and internal state is updated before throwing\n   * @internal\n   */\n  private decorateCommandError(\n    connection: Connection,\n    cmd: Document,\n    options: CommandOptions | GetMoreOptions | undefined,\n    error: unknown\n  ): Error {\n    if (typeof error !== 'object' || error == null || !('name' in error)) {\n      throw new MongoRuntimeError('An unexpected error type: ' + typeof error);\n    }\n\n    if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof MongoError) {\n      error = error.cause;\n    }\n\n    if (!(error instanceof MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return error as Error;\n    }\n\n    if (connectionIsStale(this.pool, connection)) {\n      return error;\n    }\n\n    const session = options?.session;\n    if (error instanceof MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n\n      // inActiveTransaction check handles commit and abort.\n      if (\n        inActiveTransaction(session, cmd) &&\n        !error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.TransientTransactionError);\n      }\n\n      if (\n        (isRetryableWritesEnabled(this.topology) || isTransactionCommand(cmd)) &&\n        supportsRetryableWrites(this) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if (\n        (isRetryableWritesEnabled(this.topology) || isTransactionCommand(cmd)) &&\n        needsRetryableWriteLabel(error, maxWireVersion(this)) &&\n        !inActiveTransaction(session, cmd)\n      ) {\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n      }\n    }\n\n    if (\n      session &&\n      session.isPinned &&\n      error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n    ) {\n      session.unpin({ force: true });\n    }\n\n    this.handleError(error, connection);\n\n    return error;\n  }\n\n  /**\n   * Decrement the operation count, returning the new count.\n   */\n  private decrementOperationCount(): number {\n    return (this.s.operationCount -= 1);\n  }\n\n  /**\n   * Increment the operation count, returning the new count.\n   */\n  private incrementOperationCount(): number {\n    return (this.s.operationCount += 1);\n  }\n}\n\nfunction markServerUnknown(server: Server, error?: MongoError) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\n    server.monitor?.reset();\n  }\n\n  server.emit(\n    Server.DESCRIPTION_RECEIVED,\n    new ServerDescription(server.description.hostAddress, undefined, { error })\n  );\n}\n\nfunction isPinnableCommand(cmd: Document, session?: ClientSession): boolean {\n  if (session) {\n    return (\n      session.inTransaction() ||\n      (session.transaction.isCommitted && 'commitTransaction' in cmd) ||\n      'aggregate' in cmd ||\n      'find' in cmd ||\n      'getMore' in cmd ||\n      'listCollections' in cmd ||\n      'listIndexes' in cmd\n    );\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\n  if (connection.serviceId) {\n    return (\n      connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString())\n    );\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server: Server, err: MongoError) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session: ClientSession | undefined, cmd: Document) {\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\n}\n\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology: Topology) {\n  return topology.s.options.retryWrites !== false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}