{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startCommandDocument = exports.finishCommandDocument = void 0;\nconst bson_1 = require(\"bson\");\nconst providers_1 = require(\"../providers\");\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nfunction finishCommandDocument(token, conversationId) {\n  if (conversationId != null) {\n    return {\n      saslContinue: 1,\n      conversationId: conversationId,\n      payload: new bson_1.Binary(bson_1.BSON.serialize({\n        jwt: token\n      }))\n    };\n  }\n  // saslContinue requires a conversationId in the command to be valid so in this\n  // case the server allows \"step two\" to actually be a saslStart with the token\n  // as the jwt since the use of the cached value has no correlating conversating\n  // on the particular connection.\n  return {\n    saslStart: 1,\n    mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n    payload: new bson_1.Binary(bson_1.BSON.serialize({\n      jwt: token\n    }))\n  };\n}\nexports.finishCommandDocument = finishCommandDocument;\n/**\n * Generate the saslStart command document.\n */\nfunction startCommandDocument(credentials) {\n  const payload = {};\n  if (credentials.username) {\n    payload.n = credentials.username;\n  }\n  return {\n    saslStart: 1,\n    autoAuthorize: 1,\n    mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n    payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n  };\n}\nexports.startCommandDocument = startCommandDocument;","map":{"version":3,"names":["bson_1","require","providers_1","finishCommandDocument","token","conversationId","saslContinue","payload","Binary","BSON","serialize","jwt","saslStart","mechanism","AuthMechanism","MONGODB_OIDC","exports","startCommandDocument","credentials","username","n","autoAuthorize"],"sources":["D:\\School\\referencia\\webapp\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc\\command_builders.ts"],"sourcesContent":["import { Binary, BSON, type Document } from 'bson';\n\nimport { type MongoCredentials } from '../mongo_credentials';\nimport { AuthMechanism } from '../providers';\n\n/** @internal */\nexport interface OIDCCommand {\n  saslStart?: number;\n  saslContinue?: number;\n  conversationId?: number;\n  mechanism?: string;\n  autoAuthorize?: number;\n  db?: string;\n  payload: Binary;\n}\n\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nexport function finishCommandDocument(token: string, conversationId?: number): OIDCCommand {\n  if (conversationId != null) {\n    return {\n      saslContinue: 1,\n      conversationId: conversationId,\n      payload: new Binary(BSON.serialize({ jwt: token }))\n    };\n  }\n  // saslContinue requires a conversationId in the command to be valid so in this\n  // case the server allows \"step two\" to actually be a saslStart with the token\n  // as the jwt since the use of the cached value has no correlating conversating\n  // on the particular connection.\n  return {\n    saslStart: 1,\n    mechanism: AuthMechanism.MONGODB_OIDC,\n    payload: new Binary(BSON.serialize({ jwt: token }))\n  };\n}\n\n/**\n * Generate the saslStart command document.\n */\nexport function startCommandDocument(credentials: MongoCredentials): OIDCCommand {\n  const payload: Document = {};\n  if (credentials.username) {\n    payload.n = credentials.username;\n  }\n  return {\n    saslStart: 1,\n    autoAuthorize: 1,\n    mechanism: AuthMechanism.MONGODB_OIDC,\n    payload: new Binary(BSON.serialize(payload))\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAGA,MAAAC,WAAA,GAAAD,OAAA;AAaA;;;;AAIA,SAAgBE,qBAAqBA,CAACC,KAAa,EAAEC,cAAuB;EAC1E,IAAIA,cAAc,IAAI,IAAI,EAAE;IAC1B,OAAO;MACLC,YAAY,EAAE,CAAC;MACfD,cAAc,EAAEA,cAAc;MAC9BE,OAAO,EAAE,IAAIP,MAAA,CAAAQ,MAAM,CAACR,MAAA,CAAAS,IAAI,CAACC,SAAS,CAAC;QAAEC,GAAG,EAAEP;MAAK,CAAE,CAAC;KACnD;;EAEH;EACA;EACA;EACA;EACA,OAAO;IACLQ,SAAS,EAAE,CAAC;IACZC,SAAS,EAAEX,WAAA,CAAAY,aAAa,CAACC,YAAY;IACrCR,OAAO,EAAE,IAAIP,MAAA,CAAAQ,MAAM,CAACR,MAAA,CAAAS,IAAI,CAACC,SAAS,CAAC;MAAEC,GAAG,EAAEP;IAAK,CAAE,CAAC;GACnD;AACH;AAjBAY,OAAA,CAAAb,qBAAA,GAAAA,qBAAA;AAmBA;;;AAGA,SAAgBc,oBAAoBA,CAACC,WAA6B;EAChE,MAAMX,OAAO,GAAa,EAAE;EAC5B,IAAIW,WAAW,CAACC,QAAQ,EAAE;IACxBZ,OAAO,CAACa,CAAC,GAAGF,WAAW,CAACC,QAAQ;;EAElC,OAAO;IACLP,SAAS,EAAE,CAAC;IACZS,aAAa,EAAE,CAAC;IAChBR,SAAS,EAAEX,WAAA,CAAAY,aAAa,CAACC,YAAY;IACrCR,OAAO,EAAE,IAAIP,MAAA,CAAAQ,MAAM,CAACR,MAAA,CAAAS,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC;GAC5C;AACH;AAXAS,OAAA,CAAAC,oBAAA,GAAAA,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}