{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"./../write_concern\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n  /**\n   * @param bucket - Handle for this stream's corresponding bucket\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   * @internal\n   */\n  constructor(bucket, filename, options) {\n    super();\n    /**\n     * The document containing information about the inserted file.\n     * This property is defined _after_ the finish event has been emitted.\n     * It will remain `null` if an error occurs.\n     *\n     * @example\n     * ```ts\n     * fs.createReadStream('file.txt')\n     *   .pipe(bucket.openUploadStream('file.txt'))\n     *   .on('finish', function () {\n     *     console.log(this.gridFSFile)\n     *   })\n     * ```\n     */\n    this.gridFSFile = null;\n    options = options ?? {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n    // Signals the write is all done\n    this.done = false;\n    this.id = options.id ? options.id : new bson_1.ObjectId();\n    // properly inherit the default chunksize from parent\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n      // eslint-disable-next-line github/no-then\n      checkIndexes(this).then(() => {\n        this.bucket.s.checkedIndexes = true;\n        this.bucket.emit('index');\n      }, utils_1.squashError);\n    }\n  }\n  /**\n   * @internal\n   *\n   * The stream is considered constructed when the indexes are done being created\n   */\n  _construct(callback) {\n    if (this.bucket.s.checkedIndexes) {\n      return process.nextTick(callback);\n    }\n    this.bucket.once('index', callback);\n  }\n  /**\n   * @internal\n   * Write a buffer to the stream.\n   *\n   * @param chunk - Buffer to write\n   * @param encoding - Optional encoding for the buffer\n   * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n   */\n  _write(chunk, encoding, callback) {\n    doWrite(this, chunk, encoding, callback);\n  }\n  /** @internal */\n  _final(callback) {\n    if (this.state.streamEnd) {\n      return process.nextTick(callback);\n    }\n    this.state.streamEnd = true;\n    writeRemnant(this, callback);\n  }\n  /**\n   * Places this write stream into an aborted state (all future writes fail)\n   * and deletes all chunks that have already been written.\n   */\n  async abort() {\n    if (this.state.streamEnd) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n    }\n    if (this.state.aborted) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n    }\n    this.state.aborted = true;\n    await this.chunks.deleteMany({\n      files_id: this.id\n    });\n  }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n  if (stream.state.errored) {\n    process.nextTick(callback);\n    return;\n  }\n  stream.state.errored = true;\n  process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: new bson_1.ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\nasync function checkChunksIndex(stream) {\n  const index = {\n    files_id: 1,\n    n: 1\n  };\n  let indexes;\n  try {\n    indexes = await stream.chunks.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n  const hasChunksIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n      return true;\n    }\n    return false;\n  });\n  if (!hasChunksIndex) {\n    await stream.chunks.createIndex(index, {\n      ...stream.writeConcern,\n      background: true,\n      unique: true\n    });\n  }\n}\nfunction checkDone(stream, callback) {\n  if (stream.done) {\n    return process.nextTick(callback);\n  }\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true;\n    // Create a new files doc\n    const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n    if (isAborted(stream, callback)) {\n      return;\n    }\n    // eslint-disable-next-line github/no-then\n    stream.files.insertOne(gridFSFile, {\n      writeConcern: stream.writeConcern\n    }).then(() => {\n      stream.gridFSFile = gridFSFile;\n      callback();\n    }, error => handleError(stream, error, callback));\n    return;\n  }\n  process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n  const doc = await stream.files.findOne({}, {\n    projection: {\n      _id: 1\n    }\n  });\n  if (doc != null) {\n    // If at least one document exists assume the collection has the required index\n    return;\n  }\n  const index = {\n    filename: 1,\n    uploadDate: 1\n  };\n  let indexes;\n  try {\n    indexes = await stream.files.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n  const hasFileIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n      return true;\n    }\n    return false;\n  });\n  if (!hasFileIndex) {\n    await stream.files.createIndex(index, {\n      background: false\n    });\n  }\n  await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n  const ret = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n  return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n  if (isAborted(stream, callback)) {\n    return;\n  }\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n  stream.length += inputBuf.length;\n  // Input is small enough to fit in our buffer\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n    process.nextTick(callback);\n    return;\n  }\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc;\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n      if (isAborted(stream, callback)) {\n        return;\n      }\n      // eslint-disable-next-line github/no-then\n      stream.chunks.insertOne(doc, {\n        writeConcern: stream.writeConcern\n      }).then(() => {\n        --stream.state.outstandingRequests;\n        --outstandingRequests;\n        if (!outstandingRequests) {\n          checkDone(stream, callback);\n        }\n      }, error => handleError(stream, error, callback));\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n}\nfunction writeRemnant(stream, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n  ++stream.state.outstandingRequests;\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\n  // If the stream was aborted, do not write remnant\n  if (isAborted(stream, callback)) {\n    return;\n  }\n  // eslint-disable-next-line github/no-then\n  stream.chunks.insertOne(doc, {\n    writeConcern: stream.writeConcern\n  }).then(() => {\n    --stream.state.outstandingRequests;\n    checkDone(stream, callback);\n  }, error => handleError(stream, error, callback));\n}\nfunction isAborted(stream, callback) {\n  if (stream.state.aborted) {\n    process.nextTick(callback, new error_1.MongoAPIError('Stream has been aborted'));\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["stream_1","require","bson_1","error_1","utils_1","write_concern_1","GridFSBucketWriteStream","Writable","constructor","bucket","filename","options","gridFSFile","chunks","s","_chunksCollection","files","_filesCollection","writeConcern","WriteConcern","fromOptions","done","id","ObjectId","chunkSizeBytes","bufToStore","Buffer","alloc","length","n","pos","state","streamEnd","outstandingRequests","errored","aborted","calledOpenUploadStream","checkIndexes","then","checkedIndexes","emit","squashError","_construct","callback","process","nextTick","once","_write","chunk","encoding","doWrite","_final","writeRemnant","abort","MongoAPIError","deleteMany","files_id","exports","handleError","stream","error","createChunkDoc","filesId","data","_id","checkChunksIndex","index","indexes","listIndexes","toArray","MongoError","code","MONGODB_ERROR_CODES","NamespaceNotFound","hasChunksIndex","find","keys","Object","key","createIndex","background","unique","checkDone","createFilesDoc","contentType","aliases","metadata","isAborted","insertOne","doc","findOne","projection","uploadDate","hasFileIndex","chunkSize","ret","Date","inputBuf","isBuffer","from","copy","inputBufRemaining","spaceRemaining","numToCopy","Math","min","inputBufPos","remnant"],"sources":["D:\\School\\referencia\\webapp\\node_modules\\mongodb\\src\\gridfs\\upload.ts"],"sourcesContent":["import { Writable } from 'stream';\n\nimport type { Document } from '../bson';\nimport { ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoAPIError, MONGODB_ERROR_CODES, MongoError } from '../error';\nimport { type Callback, squashError } from '../utils';\nimport type { WriteConcernOptions } from '../write_concern';\nimport { WriteConcern } from './../write_concern';\nimport type { GridFSFile } from './download';\nimport type { GridFSBucket } from './index';\n\n/** @public */\nexport interface GridFSChunk {\n  _id: ObjectId;\n  files_id: ObjectId;\n  n: number;\n  data: Buffer | Uint8Array;\n}\n\n/** @public */\nexport interface GridFSBucketWriteStreamOptions extends WriteConcernOptions {\n  /** Overwrite this bucket's chunkSizeBytes for this file */\n  chunkSizeBytes?: number;\n  /** Custom file id for the GridFS file. */\n  id?: ObjectId;\n  /** Object to store in the file document's `metadata` field */\n  metadata?: Document;\n  /**\n   * String to store in the file document's `contentType` field.\n   * @deprecated Will be removed in the next major version. Add a contentType field to the metadata document instead.\n   */\n  contentType?: string;\n  /**\n   * Array of strings to store in the file document's `aliases` field.\n   * @deprecated Will be removed in the next major version. Add an aliases field to the metadata document instead.\n   */\n  aliases?: string[];\n  /** @internal TODO(NODE-5688): make this public */\n  timeoutMS?: number;\n}\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nexport class GridFSBucketWriteStream extends Writable {\n  bucket: GridFSBucket;\n  /** A Collection instance where the file's chunks are stored */\n  chunks: Collection<GridFSChunk>;\n  /** A Collection instance where the file's GridFSFile document is stored */\n  files: Collection<GridFSFile>;\n  /** The name of the file */\n  filename: string;\n  /** Options controlling the metadata inserted along with the file */\n  options: GridFSBucketWriteStreamOptions;\n  /** Indicates the stream is finished uploading */\n  done: boolean;\n  /** The ObjectId used for the `_id` field on the GridFSFile document */\n  id: ObjectId;\n  /** The number of bytes that each chunk will be limited to */\n  chunkSizeBytes: number;\n  /** Space used to store a chunk currently being inserted */\n  bufToStore: Buffer;\n  /** Accumulates the number of bytes inserted as the stream uploads chunks */\n  length: number;\n  /** Accumulates the number of chunks inserted as the stream uploads file contents */\n  n: number;\n  /** Tracks the current offset into the buffered bytes being uploaded */\n  pos: number;\n  /** Contains a number of properties indicating the current state of the stream */\n  state: {\n    /** If set the stream has ended */\n    streamEnd: boolean;\n    /** Indicates the number of chunks that still need to be inserted to exhaust the current buffered data */\n    outstandingRequests: number;\n    /** If set an error occurred during insertion */\n    errored: boolean;\n    /** If set the stream was intentionally aborted */\n    aborted: boolean;\n  };\n  /** The write concern setting to be used with every insert operation */\n  writeConcern?: WriteConcern;\n  /**\n   * The document containing information about the inserted file.\n   * This property is defined _after_ the finish event has been emitted.\n   * It will remain `null` if an error occurs.\n   *\n   * @example\n   * ```ts\n   * fs.createReadStream('file.txt')\n   *   .pipe(bucket.openUploadStream('file.txt'))\n   *   .on('finish', function () {\n   *     console.log(this.gridFSFile)\n   *   })\n   * ```\n   */\n  gridFSFile: GridFSFile | null = null;\n\n  /**\n   * @param bucket - Handle for this stream's corresponding bucket\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   * @internal\n   */\n  constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions) {\n    super();\n\n    options = options ?? {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n    // Signals the write is all done\n    this.done = false;\n\n    this.id = options.id ? options.id : new ObjectId();\n    // properly inherit the default chunksize from parent\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n\n      // eslint-disable-next-line github/no-then\n      checkIndexes(this).then(() => {\n        this.bucket.s.checkedIndexes = true;\n        this.bucket.emit('index');\n      }, squashError);\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * The stream is considered constructed when the indexes are done being created\n   */\n  override _construct(callback: (error?: Error | null) => void): void {\n    if (this.bucket.s.checkedIndexes) {\n      return process.nextTick(callback);\n    }\n    this.bucket.once('index', callback);\n  }\n\n  /**\n   * @internal\n   * Write a buffer to the stream.\n   *\n   * @param chunk - Buffer to write\n   * @param encoding - Optional encoding for the buffer\n   * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n   */\n  override _write(\n    chunk: Buffer | string,\n    encoding: BufferEncoding,\n    callback: Callback<void>\n  ): void {\n    doWrite(this, chunk, encoding, callback);\n  }\n\n  /** @internal */\n  override _final(callback: (error?: Error | null) => void): void {\n    if (this.state.streamEnd) {\n      return process.nextTick(callback);\n    }\n    this.state.streamEnd = true;\n    writeRemnant(this, callback);\n  }\n\n  /**\n   * Places this write stream into an aborted state (all future writes fail)\n   * and deletes all chunks that have already been written.\n   */\n  async abort(): Promise<void> {\n    if (this.state.streamEnd) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new MongoAPIError('Cannot abort a stream that has already completed');\n    }\n\n    if (this.state.aborted) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new MongoAPIError('Cannot call abort() on a stream twice');\n    }\n\n    this.state.aborted = true;\n    await this.chunks.deleteMany({ files_id: this.id });\n  }\n}\n\nfunction handleError(stream: GridFSBucketWriteStream, error: Error, callback: Callback): void {\n  if (stream.state.errored) {\n    process.nextTick(callback);\n    return;\n  }\n  stream.state.errored = true;\n  process.nextTick(callback, error);\n}\n\nfunction createChunkDoc(filesId: ObjectId, n: number, data: Buffer): GridFSChunk {\n  return {\n    _id: new ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\n\nasync function checkChunksIndex(stream: GridFSBucketWriteStream): Promise<void> {\n  const index = { files_id: 1, n: 1 };\n\n  let indexes;\n  try {\n    indexes = await stream.chunks.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n\n  const hasChunksIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n      return true;\n    }\n    return false;\n  });\n\n  if (!hasChunksIndex) {\n    await stream.chunks.createIndex(index, {\n      ...stream.writeConcern,\n      background: true,\n      unique: true\n    });\n  }\n}\n\nfunction checkDone(stream: GridFSBucketWriteStream, callback: Callback): void {\n  if (stream.done) {\n    return process.nextTick(callback);\n  }\n\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true;\n    // Create a new files doc\n    const gridFSFile = createFilesDoc(\n      stream.id,\n      stream.length,\n      stream.chunkSizeBytes,\n      stream.filename,\n      stream.options.contentType,\n      stream.options.aliases,\n      stream.options.metadata\n    );\n\n    if (isAborted(stream, callback)) {\n      return;\n    }\n\n    // eslint-disable-next-line github/no-then\n    stream.files.insertOne(gridFSFile, { writeConcern: stream.writeConcern }).then(\n      () => {\n        stream.gridFSFile = gridFSFile;\n        callback();\n      },\n      error => handleError(stream, error, callback)\n    );\n    return;\n  }\n\n  process.nextTick(callback);\n}\n\nasync function checkIndexes(stream: GridFSBucketWriteStream): Promise<void> {\n  const doc = await stream.files.findOne({}, { projection: { _id: 1 } });\n  if (doc != null) {\n    // If at least one document exists assume the collection has the required index\n    return;\n  }\n\n  const index = { filename: 1, uploadDate: 1 };\n\n  let indexes;\n  try {\n    indexes = await stream.files.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n\n  const hasFileIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n      return true;\n    }\n    return false;\n  });\n\n  if (!hasFileIndex) {\n    await stream.files.createIndex(index, { background: false });\n  }\n\n  await checkChunksIndex(stream);\n}\n\nfunction createFilesDoc(\n  _id: ObjectId,\n  length: number,\n  chunkSize: number,\n  filename: string,\n  contentType?: string,\n  aliases?: string[],\n  metadata?: Document\n): GridFSFile {\n  const ret: GridFSFile = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n\nfunction doWrite(\n  stream: GridFSBucketWriteStream,\n  chunk: Buffer | string,\n  encoding: BufferEncoding,\n  callback: Callback<void>\n): void {\n  if (isAborted(stream, callback)) {\n    return;\n  }\n\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n  stream.length += inputBuf.length;\n\n  // Input is small enough to fit in our buffer\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n    process.nextTick(callback);\n    return;\n  }\n\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining: number = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc: GridFSChunk;\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (isAborted(stream, callback)) {\n        return;\n      }\n\n      // eslint-disable-next-line github/no-then\n      stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(\n        () => {\n          --stream.state.outstandingRequests;\n          --outstandingRequests;\n\n          if (!outstandingRequests) {\n            checkDone(stream, callback);\n          }\n        },\n        error => handleError(stream, error, callback)\n      );\n\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n}\n\nfunction writeRemnant(stream: GridFSBucketWriteStream, callback: Callback): void {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n\n  ++stream.state.outstandingRequests;\n\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\n\n  // If the stream was aborted, do not write remnant\n  if (isAborted(stream, callback)) {\n    return;\n  }\n\n  // eslint-disable-next-line github/no-then\n  stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(\n    () => {\n      --stream.state.outstandingRequests;\n      checkDone(stream, callback);\n    },\n    error => handleError(stream, error, callback)\n  );\n}\n\nfunction isAborted(stream: GridFSBucketWriteStream, callback: Callback<void>): boolean {\n  if (stream.state.aborted) {\n    process.nextTick(callback, new MongoAPIError('Stream has been aborted'));\n    return true;\n  }\n  return false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}